using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using PopupAgent.Rce2;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Windows.Storage;
using Windows.UI.Notifications;
using Windows.UI.Xaml.Controls;

namespace PopupAgent
{
    public sealed partial class MainPage : Page
    {
        private static Guid AgentId = Guid.NewGuid();
        private static string Address = $"https://localhost:7113/api/agent/{AgentId}";
        private const string ImageFileName = "popup-agent";
        private const string Base64Image = "";

        public MainPage()
        {
            InitializeComponent();
            _ = Task.Run(SetUpPopupAgent);
        }

        private async Task SetUpPopupAgent()
        {
            await GenerateImage();
            await DisplayToast("Startup test");
            _ = Task.Run(FeedHandler);
        }

        private async Task GenerateImage()
        {
            using (var memoryStream = new MemoryStream(Convert.FromBase64String(Base64Image)))
            {
                using (var fileStream = new FileStream(
                    $"{ApplicationData.Current.TemporaryFolder.Path}/{ImageFileName}", FileMode.Create, FileAccess.Write))
                {
                    memoryStream.CopyTo(fileStream);
                }
            }
        }

        private async Task DisplayToast(string text)
        {
            var templateContent = ToastNotificationManager.GetTemplateContent(ToastTemplateType.ToastImageAndText01);
            var templateContentTexts = templateContent.GetElementsByTagName("text");
            for (var i = 0; i < templateContentTexts.Length; i++)
            {
                templateContentTexts[i].AppendChild(templateContent.CreateTextNode(text));
            }

            var imagePath = $"ms-appdata:///temp/{ImageFileName}";
            var templateContentImages = templateContent.GetElementsByTagName("image");
            templateContentImages[0].Attributes.GetNamedItem("src").NodeValue = imagePath;

            ToastNotificationManager.CreateToastNotifier().Show(new ToastNotification(templateContent));
        }

        private async Task FeedHandler()
        {
            using (var httpClient = new HttpClient())
            {
                while (true)
                {
                    try
                    {
                        var feed = await httpClient.GetAsync(Address);
                        var content = await feed.Content.ReadAsStringAsync();
                        var rce2Messages = JsonConvert.DeserializeObject<List<Rce2Message>>(content);
                        foreach (var rce2Message in rce2Messages)
                        {
                            switch (rce2Message.Contact)
                            {
                                case Rce2Contacts.Ins.PopupText:
                                    await TryRun(() => DisplayToast(rce2Message.Payload["data"].ToObject<string>()));
                                    break;

                                default:
                                    if (rce2Message.Type == Rce2Types.WhoIs)
                                    {
                                        await TryRun(HandleWhoIsMessage);
                                    }
                                    break;
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        await Task.Delay(1000);
                        // ignore
                    }
                }
            }
        }

        private static async Task HandleWhoIsMessage()
        {
            using (var httpClient = new HttpClient())
            {
                await httpClient.PostAsync(Address, new StringContent(JsonConvert.SerializeObject(new Rce2Message
                {
                    Type = Rce2Types.WhoIs,
                    Payload = JObject.FromObject(new Rce2Agent
                    {
                        Id = AgentId,
                        Name = "Popup",
                        Ins = new Dictionary<string, string>
                        {
                            { Rce2Contacts.Ins.PopupText, Rce2Types.String },
                        },
                        Outs = new Dictionary<string, string>
                        {
                        }
                    }),
                }), Encoding.UTF8, "application/json"));
            }
        }

        private static async Task TryRun(Func<Task> taskFunc)
        {
            try
            {
                await taskFunc();
            }
            catch
            {
                // Ignore
            }
        }
    }
}
