@page "/"
@using Broker.Shared
@using System.Net.Http.Headers
@using System.Net
@using Broker.Shared.Events
@using Broker.Shared.Model
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<PageTitle>Rce2 Message Broker</PageTitle>

@if (string.IsNullOrWhiteSpace(_code))
{
    <div class="p-4 vh-90">
        <div class="d-flex flex-column flex-grow-1 h-100 justify-content-center">
            <div class="mx-auto">
                <input @bind="_codeInput" @onkeyup="OnCode" type="password" placeholder="Code">
            </div>
        </div>
    </div>
}
else
{
    <div class="p-4">
        <div><Authorization AuthorizationFailure=AuthorizationFailure /></div>
        <div><AgentList Agents="Agents" /></div>
        <div class="mt-5"><BindingList Agents="Agents" Bindings="Bindings" /></div>
        <div class="mt-5"><OutputList Outputs="Outputs" /></div>
    </div>
}

@code {
    private string _code;
    private string _codeInput;

    public bool AuthorizationFailure { get; set; }
    public List<Agent> Agents { get; set; } = new();
    public List<Binding> Bindings { get; set; } = new();
    public List<string> Outputs { get; set; } = new();

    public void OnCode(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            _code = _codeInput;
            Task.Run(GetFeed);
        }
    }

    private async Task GetFeed()
    {
        var id = Guid.NewGuid();
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Code", _code);

        while(true)
        {
            try
            {
                var response = await HttpClient.GetAsync($"/api/broker/{id}");
                if (IsValid(response) == false)
                {
                    await Task.Delay(5000);
                    continue;
                }
                await HandleFeed(response);
            }
            catch (Exception e)
            {
                await Task.Delay(5000);
            }
        }
    }

    private bool IsValid(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode == false)
        {
            if (response.StatusCode == HttpStatusCode.Unauthorized)
            {
                AuthorizationFailure = true;
                StateHasChanged();
            }
            return false;
        }
        return true;
    }

    private async Task HandleFeed(HttpResponseMessage response)
    {
        var brokerEvents = JsonConvert.DeserializeObject<List<JObject>>(await response.Content.ReadAsStringAsync());
        foreach (var brokerEvent in brokerEvents)
        {
            var brokerEventBase = brokerEvent.ToObject<BrokerEventBase>();
            switch (brokerEventBase.BrokerEventType)
            {
                case nameof(AgentUpdatedEvent):
                    Handle(brokerEvent.ToObject<AgentUpdatedEvent>());
                    break;

                case nameof(AgentOutputEvent):
                    Handle(brokerEvent.ToObject<AgentOutputEvent>());
                    break;

                case nameof(AgentDeletedEvent):
                    Handle(brokerEvent.ToObject<AgentDeletedEvent>());
                    break;

                case nameof(BindingAddedEvent):
                    Handle(brokerEvent.ToObject<BindingAddedEvent>());
                    break;

                case nameof(BindingDeletedEvent):
                    Handle(brokerEvent.ToObject<BindingDeletedEvent>());
                    break;
            }
        }
        StateHasChanged();
    }

    private void Handle(AgentUpdatedEvent agentUpdatedEvent)
    {
        var agent = Agents?.FirstOrDefault(e => e.Id == agentUpdatedEvent.Agent.Id);
        if (agent != null)
        {
            Agents?.Remove(agent);
        }
        Agents?.Add(agentUpdatedEvent.Agent);
    }

    private void Handle(AgentOutputEvent agentOutputEvent)
    {
        Outputs.Insert(0, $"{agentOutputEvent.AgentId} - {agentOutputEvent.Contact} -  {agentOutputEvent.Payload}");
        Outputs = Outputs.Take(100).ToList();

        var agent = Agents.FirstOrDefault(e => e.Id == agentOutputEvent.AgentId);
        if (agent != null)
        {
            agent.LastOut = $"{agentOutputEvent.Contact} - {agentOutputEvent.Payload}";
        }
    }

    private void Handle(AgentDeletedEvent agentDeletedEvent)
    {
        var agent = Agents.FirstOrDefault(e => e.Id == agentDeletedEvent.Id);
        if (agent != null)
        {
            Agents.Remove(agent);
        }
    }

    private void Handle(BindingAddedEvent bindingAddedEvent)
    {
        Bindings.Add(bindingAddedEvent.Binding);
    }

    private void Handle(BindingDeletedEvent bindingDeletedEvent)
    {
        Bindings.Remove(bindingDeletedEvent.Binding);
    }
}
